# -*- coding: utf-8 -*-
from time import time
from glob import glob
from random import choice

'''
Authors: Théophile Demazure <theophile.demazure@hec.ca>
Inspired by contents provided by the NeuroTechX community (https://github.com/NeuroTechX/eeg-notebooks)
'''

import numpy as np
from pandas import DataFrame
from psychopy import visual, core, event, logging, info, data
import matplotlib.pyplot as plt

import os
import json
from datetime import datetime

'''
This framework support basic a stimuli presentation + behavioral measure within-subject:
-> Instruction
-> Fixation cross -> Image -> Question

It handles multiple paradigm:
- 2 conditions: oddball (distribution), random binomial conditions, balanced conditions
- 3 and more conditions: random conditions, balanced conditions

Installation
- Add the script to the folder with your other experimentations
- The stimuli should be in the folder stim next to the script

Configuration:
- First, adjust the parameters in the 'Parameters dictionnary'.
-- Follow the comments. 
-- 1. Configure the conditions and number of trials
-- 2. Add the relative path to the stimuli folders (1 folder per condition)
-- 3. Set stimulus presentation parameters
-- 4. Enable/disable fixation cross, and configure if necessary
-- 5. Enable/Disable training trials 
--- 5.2 add an a folder with the stimuli used for the training
- Second, configure scale 
-- 6. set item, range, choices...
- Third, write the instructions
-- 7. write the instructions for the main experiment in the function 'show_instruction'
-- 8. if enabled write the instruction in the function 'show_instructions_training'
'''

# Author and Versioning - Always keep past version of your experiments
__author__ = u"""Théophile Demazure"""
__version__ = u"v1.0.2"
__date__ = datetime.now().strftime("%d-%m-%Y_%Hh-%Mm-%Ss")      # Store execution date

# Ensure that relative paths start from the same directory as this script
_ScriptDirectory = os.path.abspath(os.path.dirname(__file__))
# _ScriptDirectory = os.path.dirname('C:/Users/theop/PycharmProjects/pyUnicorn/experiment/')
# os.chdir(_ScriptDirectory)

# Create the data output folder if it does not exist
if not os.path.exists(_ScriptDirectory + '/data'):
    os.makedirs(_ScriptDirectory + '/data')

# Declare task parameters.
# Display parameters and system information are automatically adjusted by the current script
'''
In case of multiple screen : 
- Configure manually the variable 'screenToShow' to the primary screen
'''
parameters = {
    # Conditions parameters
    'nCondition': 2,
    'nEvenTrials': True,  # True, an even number of trials will be generated by condition, False everything is random
    'nTrialsPerCondition': 10,  # number of trial per condition
    'nTrials': 40,  # total number of trials in this session
    # if 2 conditions, oddball ?
    'oddball': False,
    'distribution': 0.3,  # random binomial

    # !!! paths to your stimuli, one folder == one condition !!!
    # First entry = condition 1, second entry condition 2, etc...
    # the current example have 2 conditions
    # Do not forget the marker to find the image type (e.g., *.jpg = everything (*) that finish by .jpg)
    # Use the same /stim folder than we used until now, just create a new folder with your conditions in it
    'stimCondPath': ['/stim/face_house/faces/*_3.jpg', '/stim/face_house/houses/*.3.jpg'],
    'presentationTime': 6000,  # Presentation time (seconds) # End the experiment stop past that time

    # Stimulus parameters
    'interTrialInterval': 0.4,      # Set Inter trial interval
    'stimulusOnsetAsynchrony': 2,     # Stimulus onset asynchrony, set stimulus presentation duration
    'jitter': 0.2,      # Jitter value, vary your inter-trial interval, if no jitter (val = 0)
    'consumeImage': False,  # After being drawn the image is consumer (True), (False) same image can be drawn again

    # Fixation cross parameters (presentation time = interTrialInterval + np.random.rand() * jitter)
    'fixCross': True,  # Use of cross
    'fixCrossSize': 50,  # size of cross, in pixels
    'lineWidth': 5,
    'fixCrossPos': (0, 0),  # (x,y) pos of fixation cross displayed before each stimulus (for gaze drift correction)
    'fixVertices': ((0, -0.5), (0, 0.5), (0, 0), (-0.5, 0), (0.5, 0)),
    'lineColor': 'black',

    # Training trials
    'trainingTrials': True,  # if True, training trials / If False, no training
    'nTrialsTraining': 2,  # Number of trials during the training
    'stimPathTraining': '/stim/face_house/houses/*.3.jpg',  # path to the folder with the training stimuli

    # In this section, modify only the screen resolution
    # 'screenToShow' to be modified if multiple monitor used
    # display parameters
    'screenResolution': [1920, 1080], #
    'screenColor': (128, 128, 128),  # in rgb255 space: (r,g,b) all between 0 and 255
    'fullScreen': True,       # run in full screen mode?
    'screenToShow': 0,        # display on primary screen (0) or secondary (1)?
    'bitsPerPel': 0,
    'displayFrequency': 0,

    # system information
    'os': '',
    'osRelease': '',
    'osVersion': '',
    'prcsrAchitecture': '',
    'prcsrBitsLinkage': '',
    'prcsrRealName': '',
    'prcsrName': '',
    'rams': ''
}

scale_config = {
    'item': 'How are you ??',  # Item that will be shown
    'low': 1,  # Lowest value used
    'high': 3,  # Higher value used (if high-low > 1, increment of 1 will be created. Ex. 5p Likert scale (l=1, h=5)
    'choices': ['Bad', '', 'Good'],  # Name the choices that will be showed
    'markerStart': 2,
    'scale': '',
    'singleClick': False,
    'noMouse': True,  # If true, only keys can be used as input
    'acceptKeys': 'space',
    'minTime': 0.2,  # Seconds that must elapse before a response can be accepted
    'maxTime': 3.0  # Default = 0.0 (no time limit).
}

# create a function to be called with the function callOnFlip()
# https://www.psychopy.org/api/visual/window.html#psychopy.visual.Window.callOnFlip
# this execute the function synchronized with the next frame flipped
def markOnFlip(exp, label, image, eeg):
    label = str(label)
    # record event information in the experiment data file
    exp.addData('condition', label)
    exp.addData(label, int(round(time() * 1000)))
    exp.addData('image', str(image))

    if eeg:
        # Push marker to the data acquisition (e.g., via LSL and pylsl)
        # ex: outlet.push_sample(markers['start'])
        pass

def present(subj, duration=1000, eeg=False):
    """
    Stimuli presentation function
    :param subj: Subject ID
    :param duration: Presentation duration of the stimuli (seconds)
    :param eeg: Bool for EEG recording
    :return: --
    """
    # Set stimuli presentation parameters based on defined task parameters
    n_trials = parameters['nTrials']
    # Safeguard if parametrized n_trials and (nCondition * nTrialPerCondition) are different.
    if parameters['nTrials'] != (parameters['nTrials']*parameters['nTrialsPerCondition']):
        parameters['nTrials'] = parameters['nCondition']*parameters['nTrialsPerCondition']
        n_trials = parameters['nTrials']

    # Set Inter trial interval
    iti = parameters['interTrialInterval']
    # Stimulus on set asynchrony, set stimulus presentation duration
    soa = parameters['stimulusOnsetAsynchrony']
    # Jitter value, vary your inter-trial interval
    jitter = parameters['jitter']

    def load_image(fn):
        return visual.ImageStim(win=myWin, image=fn)

    # Setup graphics
    # Setup window resolution
    myWin = visual.Window(parameters['screenResolution'], monitor='testMonitor', units="deg",
                          fullscr=parameters['fullScreen'], screen=parameters['screenToShow'])
    myWin.mouseVisible = False

    record_duration = np.float32(duration)

    if eeg:
        # Configure Markers for the experiment
        markers = {'cross': [10]}
        for c in range(0, parameters['nCondition']):
            # Create markers for each conditions if not created manually
            marker = {str(c+1): c+1}

    # Setup trial list
    if parameters['oddball'] is True and parameters['nCondition'] == 2 and parameters['nEvenTrials'] is False:
        # Here I have 2 conditions, oddball, I generate a list of trials based on a ditribution
        image_type = np.random.binomial(1, parameters['distribution'], n_trials)
    elif parameters['oddball'] is False and parameters['nCondition'] == 2 and parameters['nEvenTrials'] is True:
        # Here I have 2 condition, not oddball, with an even number of trials between conditions
        image_type = np.asarray(0)
        for c in range(0, parameters['nCondition']):
            for t in range(0, parameters['nTrialsPerCondition']):
                image_type = np.append(image_type, c)
                np.random.shuffle(image_type)
    elif parameters['oddball'] is False and parameters['nCondition'] > 2:
        if parameters['nEvenTrials'] is False:
            # Here I have 2+ condition, not oddball, with a random number of trials between conditions
            image_type = np.random.randint(0, parameters['nCondition'], n_trials)
        else:
            # Here I have 2+ condition, not oddball, with an even number of trials between conditions
            image_type = np.empty((0, 0), dtype=int)
            for c in range(0, parameters['nCondition']):
                for t in range(0, parameters['nTrialsPerCondition']):
                    image_type = np.append(image_type, c)
                    np.random.shuffle(image_type)

    trials = DataFrame(dict(image_type=image_type, timestamp=np.zeros(n_trials)))

    # Load images
    # Config for the conditions folders and their stimuli
    allCondStim = []
    for p in parameters['stimCondPath']:
        condStim = list(map(load_image, glob(_ScriptDirectory + p)))
        allCondStim.append(condStim)

    """
    This section monitor the computer performance during the experiment
    """
    myWin.recordFrameIntervals = True

    logDatDebug = logging.LogFile(_ScriptDirectory + '/data/' + str(subj) + '_logDebug_' + __date__ + '.log',
                                  filemode='a',
                                  level=logging.DEBUG, encoding='utf8')

    logDatInfo = logging.LogFile(_ScriptDirectory + '/data/' + str(subj) + '_logInfo_' + __date__ + '.log',
                                 filemode='a',
                                 level=logging.INFO, encoding='utf8')

    with open(_ScriptDirectory + '/data/' + str(subj) + '_parameters_' + __date__ + '.json', 'w') as jpr:
        json.dump(parameters, jpr)

    runInfo = info.RunTimeInfo(win=myWin, refreshTest='grating', verbose=False, userProcsDetailed=True)

    with open(_ScriptDirectory + '/data/' + str(subj) + '_runtimeinfo_' + __date__ + '.txt', "w") as ritxt:
        ritxt.write(str(runInfo))

    """
    This section enable you to create a data file recording the data of your experiment
    """
    runInfo = info.RunTimeInfo(win=myWin, refreshTest='grating', verbose=False, userProcsDetailed=True)

    exp = data.ExperimentHandler(name=__author__ + '_' + __date__,
                                 version=__version__,
                                 extraInfo={'participant': subj},
                                 runtimeInfo=runInfo,
                                 savePickle=False,
                                 saveWideText=False,
                                 dataFileName=str(subj) + '_expData_' + __date__)

    """
    Creation of the scale
    """
    myItem = visual.TextStim(myWin, text=scale_config['item'], height=.12, units='norm')
    ratingScale = visual.RatingScale(
        myWin, low=scale_config['low'], high=scale_config['high'], choices=scale_config['choices'],
        leftKeys='left', rightKeys='right', acceptKeys=scale_config['acceptKeys'],
        singleClick=scale_config['singleClick'], noMouse=scale_config['noMouse'],
        minTime=scale_config['minTime'], maxTime=scale_config['maxTime'], markerStart=scale_config['markerStart'])

    # Show the instructions screen
    show_instructions()

    """
    Creation of the fixation cross
    """
    if parameters['fixCross']:
        fixation = visual.ShapeStim(myWin, vertices=parameters['fixVertices'], lineWidth=parameters['lineWidth'],
                                    pos=parameters['fixCrossPos'], closeShape=False, lineColor=parameters['lineColor'])

    if eeg:
        # Start EEG stream
        # Start EEG Stream, wait for signal to settle if needed
        core.wait(10)
        pass

    start = time()

    # Iterate through the events
    for ii, trial in trials.iterrows():

        # Condition to leave experiment if max time is passed, an event key press can be specified
        # to leave the experiment (modifiy: len(event.getKeys()) > 0)
        if len(event.getKeys()) > 0 or (time() - start) > record_duration:
            break
        # Clear event before each trial
        event.clearEvents()

        # Inter trial interval
        # Pseudorandomized jittering ITI
        myWin.callOnFlip(exp.addData, 'fixCross', int(round(time() * 1000)))
        if parameters['fixCross']:
            fixation.draw()
            myWin.flip()
        core.wait(iti + np.random.rand() * jitter)

        # Select and display image
        label = trials['image_type'].iloc[ii]
        index = choice(range(len(allCondStim[label])))
        image = allCondStim[label][index]

        image.draw()

        # add some data for this trial / label +1 so condition 0 become 1
        # execute markOnFlip when the stimuli is flipped and the frame refreshed
        myWin.callOnFlip(markOnFlip, exp, label+1, image, eeg)

        myWin.flip()

        # offset
        core.wait(soa)
        myWin.flip()

        myWin.callOnFlip(exp.addData, 'decisionTimestamp', int(round(time() * 1000)))
        myWin.callOnFlip(exp.addData, 'rating', str(ratingScale.getRating()))
        myWin.callOnFlip(exp.addData, 'decisionTime', ratingScale.getRT())

        ratingScale.reset()
        while ratingScale.noResponse:
            myItem.draw()
            ratingScale.draw()
            myWin.flip()

        # Consume image
        if parameters['consumeImage']:
            del allCondStim[label][index]

        exp.nextEntry()

    # Stop EEG acquisition
    if eeg:
        # STOP EEG
        pass

    # Save experiment data
    exp.saveAsWideText(_ScriptDirectory + '/data/' + str(subj) + '_expData_' + __date__+'.csv')

    # Output Frame intervals
    plt.plot(myWin.frameIntervals)
    myWin.saveFrameIntervals(fileName=_ScriptDirectory + '/data/' + str(subj) + '_frameInterval_' + __date__ + '.txt')

    myWin.close()


def show_instructions():
    """
    Instruction presentation function
    :return:
    """

    instruction_text = \
    u"""
    This is the main experiment....  
 
    Stay still, focus on the centre of the screen, and try not to blink. 
    Images will be presented, questions will be asked....
    
    This block will run for %s trials.
    
    Press spacebar to continue. 
    
    """
    instruction_text = instruction_text %parameters['nTrials']

    # graphics
    myWin = visual.Window(parameters['screenResolution'], monitor="testMonitor", units="deg",
                          fullscr=parameters['fullScreen'], screen=parameters['screenToShow'])

    myWin.mouseVisible = False

    # Instructions
    text = visual.TextStim(
        win=myWin,
        text=instruction_text,
        color=[-1, -1, -1])
    text.draw()
    myWin.flip()
    event.waitKeys(keyList="space")

    myWin.close()

def present_training(subj, duration=500):
    """
    Stimuli presentation function for the training, it register no data
    :param subj: Subject ID
    :param duration: Presentation duration of the stimuli (seconds)
    :param eeg: Bool for EEG recording
    :return: --
    """
    # Set stimuli presentation parameters based on defined task parameters
    n_trials = parameters['nTrialsTraining']
    # Set Inter trial interval
    iti = parameters['interTrialInterval']
    # Stimulus on set asynchrony, set stimulus presentation duration
    soa = parameters['stimulusOnsetAsynchrony']
    # Jitter value, vary your inter-trial interval
    jitter = parameters['jitter']

    def load_image(fn):
        return visual.ImageStim(win=myWin, image=fn)

    # Setup graphics
    # Setup window resolution
    myWin = visual.Window(parameters['screenResolution'], monitor='testMonitor', units="deg",
                          fullscr=parameters['fullScreen'], screen=parameters['screenToShow'])

    record_duration = np.float32(duration)

    # Setup training trial list
    image_type = np.empty((0, 0), dtype=int)
    for t in range(0, parameters['nTrialsTraining']):
        image_type = np.append(image_type, t)

    trials = DataFrame(dict(image_type=image_type, timestamp=np.zeros(n_trials)))

    # Load images
    # Config for the conditions folders and their stimuli
    allCondStim = list(map(load_image, glob(_ScriptDirectory + parameters['stimPathTraining'])))

    """
    Creation of the scale
    """
    myItem = visual.TextStim(myWin, text=scale_config['item'], height=.12, units='norm')
    ratingScale = visual.RatingScale(
        myWin, low=scale_config['low'], high=scale_config['high'], choices=scale_config['choices'],
        leftKeys='left', rightKeys='right', acceptKeys=scale_config['acceptKeys'],
        singleClick=scale_config['singleClick'], noMouse=scale_config['noMouse'],
        minTime=scale_config['minTime'], maxTime=scale_config['maxTime'])

    # Show the instructions screen
    show_instructions_training()

    """
    Creation of the fixation cross
    """
    if parameters['fixCross']:
        fixation = visual.ShapeStim(myWin, vertices=parameters['fixVertices'], lineWidth=parameters['lineWidth'],
                                    pos=parameters['fixCrossPos'], closeShape=False, lineColor=parameters['lineColor'])

    # Start EEG Stream, wait for signal to settle, and then pull timestamp for start point
    start = time()

    # Iterate through the events
    for ii, trial in trials.iterrows():

        if len(event.getKeys()) > 0 or (time() - start) > record_duration:
            break
        # Clear event before each trial
        event.clearEvents()

        # Inter trial interval
        # Pseudorandomized jittering ITI
        if parameters['fixCross']:
            fixation.draw()
            myWin.flip()
        core.wait(iti + np.random.rand() * jitter)

        # Select and display image
        image = choice(allCondStim)
        image.draw()

        myWin.flip()

        # offset
        core.wait(soa)
        myWin.flip()

        ratingScale.reset()
        while ratingScale.noResponse:
            myItem.draw()
            ratingScale.draw()
            myWin.flip()

        # Consume image
        allCondStim.remove(image)

    myWin.close()

def show_instructions_training():
    """
    Instruction presentation function
    :return:
    """

    instruction_text = \
        u"""
        Welcome to the N170 experiment! 
        
        This is the information you need to know
    
        Stay still, focus on the centre of the screen, and try not to blink. 
        
        This block of training will run for %s trials.
        
        Press spacebar to continue. 
        """
    instruction_text = instruction_text % parameters['nTrialsTraining']

    # graphics
    myWin = visual.Window(parameters['screenResolution'], monitor="testMonitor", units="deg",
                          fullscr=parameters['fullScreen'], screen=parameters['screenToShow'])

    myWin.mouseVisible = False

    # Instructions
    text = visual.TextStim(
        win=myWin,
        text=instruction_text,
        color=[-1, -1, -1])
    text.draw()
    myWin.flip()
    event.waitKeys(keyList="space")

    myWin.close()


if __name__ == '__main__':
    subject = input('Subject: ')

    if parameters['trainingTrials']:
        present_training(subj=subject)

    present(subj=subject, duration=parameters['presentationTime'], eeg=False)
